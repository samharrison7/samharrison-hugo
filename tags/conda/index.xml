<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Conda on Sam Harrison</title><link>https://samharrison.science/tags/conda/</link><description>Recent content in Conda on Sam Harrison</description><generator>Hugo</generator><language>en</language><lastBuildDate>Fri, 06 Jan 2023 16:02:35 +0000</lastBuildDate><atom:link href="https://samharrison.science/tags/conda/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a Conda package for a project with Fortran and Python code</title><link>https://samharrison.science/posts/conda-package-fortran-python/</link><pubDate>Fri, 06 Jan 2023 16:02:35 +0000</pubDate><guid>https://samharrison.science/posts/conda-package-fortran-python/</guid><description>&lt;p>Creating a Conda package is a great way to package and distribute your projectâ€™s software and its dependencies in a platform- and language-agnostic way. As Conda packages distribute compiled binaries, rather than your source code, they are not limited to specific programming languages (e.g. unlike Python packages distributed via PyPI). This makes them particularly suited to complex projects that might use a selection of different languages.&lt;/p>
&lt;p>One common paradigm in scientific computing is the combined use of Fortran and Python. Fortran is often used for underlying models and algorithms that are computationally intensive, whilst the plethora of data processing packages available in Python are leveraged to provide advanced data parsing and visualisation capabilities. This is a paradigm I often use in my own work.&lt;/p></description></item></channel></rss>