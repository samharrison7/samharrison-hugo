<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Sam Harrison</title><link>https://samharrison.science/tags/python/</link><description>Recent content in python on Sam Harrison</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Jul 2024 10:07:12 +0100</lastBuildDate><atom:link href="https://samharrison.science/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Scheduling a Python script using PythonAnywhere and cron-job.org</title><link>https://samharrison.science/posts/scheduling-python-scripts/</link><pubDate>Tue, 02 Jul 2024 10:07:12 +0100</pubDate><guid>https://samharrison.science/posts/scheduling-python-scripts/</guid><description>Scheduling a script is one of those jobs that sounds like it should be easy, but is surprisingly tricky. Here, I walk you through one of the easier ways of doing so, by hosting the script on PythonAnywhere to give it a URL, and scheduling it to run using cron-job.org, both of which offer free services.
What&amp;rsquo;s so difficult? Scheduling scripts is when, instead of manually running a script whenever you need to, you tell a scheduler to run it at a given frequency or based on other events.</description></item><item><title>Getting more out of your Tado heating system with Python and the Tado API</title><link>https://samharrison.science/posts/tado-heating-python-api/</link><pubDate>Mon, 30 Oct 2023 00:00:00 +0000</pubDate><guid>https://samharrison.science/posts/tado-heating-python-api/</guid><description>We have recently installed a Tado thermostat to control our heating system. Tado is a &amp;ldquo;smart&amp;rdquo; heating system, in the sense that it is internet connected and lets you control your heating via its own app. The app is surprisingly good, but lacking in a few places, and so this got me wondering whether Tado had an API, and whether I could leverage this to get a bit more out of our heating system.</description></item><item><title>Creating a Conda package for a project with Fortran and Python code</title><link>https://samharrison.science/posts/conda-package-fortran-python/</link><pubDate>Fri, 06 Jan 2023 16:02:35 +0000</pubDate><guid>https://samharrison.science/posts/conda-package-fortran-python/</guid><description>Creating a Conda package is a great way to package and distribute your projectâ€™s software and its dependencies in a platform- and language-agnostic way. As Conda packages distribute compiled binaries, rather than your source code, they are not limited to specific programming languages (e.g. unlike Python packages distributed via PyPI). This makes them particularly suited to complex projects that might use a selection of different languages.
One common paradigm in scientific computing is the combined use of Fortran and Python.</description></item><item><title>How to compare two empirical distributions</title><link>https://samharrison.science/posts/how-to-compare-two-distributions/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>https://samharrison.science/posts/how-to-compare-two-distributions/</guid><description>The world is full of distributions - people&amp;rsquo;s height, incomes, exam results, average temperatures, heights of trees, sizes of microplastic particles in the environment. It stands to reason that there will be times when we need to compare these distributions to see how similar (or different) they are. For example, were summer temperatures similar this year to last year? Do two groups of people who buy different products make similar incomes?</description></item></channel></rss>